post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/exporter/executor"
body <- '{"result_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/exporter/executor"
body <- '{"result_req": {"result":{ "execResult": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/exporter/executor"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
body <- '{"postUserLogin":{"login":"takahiro.honda@open.edu.au","password":"GoodData1","remember":1}}'
url <- "https://secure.gooddata.com/gdc/account/login"
post_request <- POST(url, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request)
head(post_request)
head(post_request)$all_headers[[1]]$headers$`set-cookie`
head(post_request)$cookies[1,'value']
cookies(post_request)
"Cookie" = c("$Version=0", sprintf("GDCAuthSST=%s", head(post_request)$cookies[1,'value']), "$Path=/gdc/account")
url2 <- "https://secure.gooddata.com/gdc/account/token"
post_request2 <- GET(url2,add_headers("Set-Cookie" = sprintf("GDCAuthSST=%s; path=/gdc/; secure; HttpOnly",head(post_request)$cookies[1,'value']),
"Content-Type" = "application/json"))
head(post_request2)
post_request2
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
tz <- GET("https://secure.gooddata.com/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/service/timezone",add_headers("Accept"= "application/json","Content-Type"="application/json"))
tz
url <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
req <- POST(url4, body = body, add_headers("Accept"= "application/json"))
req
content(req)
url <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13208"}}'
req <- POST(url4, body = body, add_headers("Accept"= "application/json"))
req
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13208"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
content(post_request4)
body <- '{"report_req": {"reportDefinition": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/24135"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
library(httr)
library(jsonlite)
body <- '{"postUserLogin":{"login":"takahiro.honda@open.edu.au","password":"GoodData1","remember":1}}'
url <- "https://secure.gooddata.com/gdc/account/login"
post_request <- POST(url, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request)
head(post_request)
head(post_request)$all_headers[[1]]$headers$`set-cookie`
head(post_request)$cookies[1,'value']
cookies(post_request)
"Cookie" = c("$Version=0", sprintf("GDCAuthSST=%s", head(post_request)$cookies[1,'value']), "$Path=/gdc/account")
url2 <- "https://secure.gooddata.com/gdc/account/token"
post_request2 <- GET(url2,add_headers("Set-Cookie" = sprintf("GDCAuthSST=%s; path=/gdc/; secure; HttpOnly",head(post_request)$cookies[1,'value']),
"Content-Type" = "application/json"))
head(post_request2)
post_request2
url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
content(post_request4$$execResult$reportView$rows)
post_request4$$execResult$reportView$rows
post_request4$execResult$reportView$rows
content(post_request4$execResult$reportView$rows)
json <- httr::content(post_request4, as = "text")
json
fromJSON(json)
library(httr)
library(jsonlite)
body <- '{"postUserLogin":{"login":"takahiro.honda@open.edu.au","password":"GoodData1","remember":1}}'
url <- "https://secure.gooddata.com/gdc/account/login"
post_request <- POST(url, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request)
head(post_request)
head(post_request)$all_headers[[1]]$headers$`set-cookie`
head(post_request)$cookies[1,'value']
cookies(post_request)
"Cookie" = c("$Version=0", sprintf("GDCAuthSST=%s", head(post_request)$cookies[1,'value']), "$Path=/gdc/account")
url2 <- "https://secure.gooddata.com/gdc/account/token"
post_request2 <- GET(url2,add_headers("Set-Cookie" = sprintf("GDCAuthSST=%s; path=/gdc/; secure; HttpOnly",head(post_request)$cookies[1,'value']),
"Content-Type" = "application/json"))
head(post_request2)
post_request2
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
json <- httr::content(post_request4, as = "text")
uri <- fromJSON(json)
downloadURL <- sprintf("https://secure.gooddata.com%s", uri)
download <- GET(downloadURL)
head(download)
str(download)
head(download$content)
url <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/78857}}'
req <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(req)
req
url <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/78857"}}'
req <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(req)
req
body <- '{"postUserLogin":{"login":"takahiro.honda@open.edu.au","password":"GoodData1","remember":1}}'
url <- "https://secure.gooddata.com/gdc/account/login"
post_request <- POST(url, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request)
head(post_request)
head(post_request)$all_headers[[1]]$headers$`set-cookie`
head(post_request)$cookies[1,'value']
cookies(post_request)
"Cookie" = c("$Version=0", sprintf("GDCAuthSST=%s", head(post_request)$cookies[1,'value']), "$Path=/gdc/account")
url2 <- "https://secure.gooddata.com/gdc/account/token"
post_request2 <- GET(url2,add_headers("Set-Cookie" = sprintf("GDCAuthSST=%s; path=/gdc/; secure; HttpOnly",head(post_request)$cookies[1,'value']),
"Content-Type" = "application/json"))
head(post_request2)
post_request2
url <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/78857"}}'
req <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(req)
req
json <- httr::content(req, as = "text")
uri <- fromJSON(json)
downloadURL <- sprintf("https://secure.gooddata.com%s", uri)
download <- GET(downloadURL)
str(download)
json <- httr::content(download, as = "text")
json
fromJson(json)
library(jsonlite)
fromJson(json)
fromJSON?
?
;
content(download)
install.packages("readr")
library(readr)
content(download)
data <- as.data.frame(content(download))
View(data)
head(download$content)
url4 <- "https://secure.gooddata.com/gdc/app/projects/adle3pj1cp1f6sywmrnufdtty3imutzf/execute/raw"
# url4 <- "https://secure.gooddata.com/gdc/xtab2/executor3"
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
post_request4 <- POST(url4, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request4)
post_request4
json <- httr::content(post_request4, as = "text")
uri <- fromJSON(json)
downloadURL <- sprintf("https://secure.gooddata.com%s", uri)
download <- GET(downloadURL)
library(readr)
data <- as.data.frame(content(download))
View(data)
check <- subset(data, 'Enrolled By' == 'takahiro.honda')
check <- subset(data, Enrolled.By == 'takahiro.honda')
names(data) <- sub(" ", "", names(data))
View(data)
check <- subset(data, EnrolledBy == 'takahiro.honda')
View(check)
sum(data$revenue)
str(check)
sum(check$Revenue)
sum(check$ContributionMargin)
check2 <- subset(data, Date(EnrolmentDate)== '23/09/2016')
names(data) <- sub("(", "", names(data))
names(data) <- sub(")", "", names(data))
names(data) <- sub("\(", "", names(data))
names(data) <- sub("\)", "", names(data))
names(data[,9]) <- 'EnrolledDate'
View(data)
str(data)
names(data)[,9
]
names(data[,9])
colnames(data)[9]
body <- '{"report_req": {"report": "/gdc/md/adle3pj1cp1f6sywmrnufdtty3imutzf/obj/13209"}}'
colnames(data)[9] <- "EnrolledDate"
View(data)
check2 <- subset(data, EnrolledDate == "23/09/2016")
View(check2)
printf("Hello, %s", input)
print(sprintf("Hello, %s", input))
input = readline('What is your name')
print(sprintf("Hello, %s", input))
source('~/.active-rstudio-document')
library(URLencode)
install.packages(URLencode)
install.packages('URLencode')
url = URLencode('http://maps.googleapis.com/maps/api/geocode/json?address=' + 'hello world, hello')
url = URLencode('http://maps.googleapis.com/maps/api/geocode/json?address=hello world, hello')
url
url = URLencode('http://maps.googleapis.com/maps/api/geocode/json?address=Melbourne Australia')
url
url = URLencode('http://maps.googleapis.com/maps/api/geocode/json?address=Ann Arbor, MI')
url
input = readline('Enter the location information: /n')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
url <- URLencode('hello world hello world')
url
input <- readline('Enter the location information: \n')
urlString <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
source('~/.active-rstudio-document')
input = 'a'
urlString <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
input <- readline('Enter the location information: \n')
input <- readline('Enter the location information: ')
urlString <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
url
library(httr)
library(jsonlite)
input <- readline('Enter the location information: ')
urlStr <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
url <- URLencode(urlStr)
request <- GET(url)
record <- content(postRequest,"parsed")
json <- httr::content(postRequest, as = "text")
data <- fromJSON(json)
data
request
request <- REQUEST(url)
request
request <- POST(url)
request
request <- GET(url)
request
url
source('~/.active-rstudio-document')
library(httr)
library(jsonlite)
input <- readline('Enter the location information: ')
urlStr <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
url <- URLencode(urlStr)
request <- GET(url)
request
url
source('~/.active-rstudio-document')
request
content(request)
geoRecord<- content(request,"parsed")
json <- httr::content(request, as = "text")
data <- fromJSON(json)
data
df <- as.data.frame(data$results)
View(df)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(Geocoding(Tokyo))
source('~/.active-rstudio-document')
library(httr)
library(jsonlite)
Geocoding <- function(){
input <- readline('Enter the location information: ')
urlStr <- sprintf('http://maps.googleapis.com/maps/api/geocode/json?address=%s', input)
url <- URLencode(urlStr)
request <- GET(url)
geoRecord<- content(request,"parsed")
json <- httr::content(request, as = "text")
data <- fromJSON(json)
df <- as.data.frame(data$results)
df
}
View(Geocoding())
source('C:/Users/Taka/Desktop/R_Analytics/GoogleGeocoding.R')
geoRecord
data
library(httr)
consumer_key = 	'kgUcTZz6JxHI9cWybDjWm4bcr'
consumer_secret = 'AJBuPS1ZiAQI2nW1BpTRySMk7Tt6xONywP6YYMJbpqWs3pfN81'
access_token = '261093704-lMS5vYRoslcMMMBgYgAQxUw3oqBad6GT5AlNy5aA'
access_token_secret = 'USqeYR07crQ31tVhKZU6KbiPKV59NaPv6J3sO7r7DxZ4Z'
app <- oauth_app('APITwister',consumer_key,consumer_secret)
sig <- sign_oauth1.0(app,token=access_token, token_secret=access_token_secret)
postRequest = GET('https://api.twitter.com/1.1/followers/list.json', sig)
postRequest
header(postRequest)
postRequest = GET('https://api.twitter.com/1.1/followers/list.json', sig)
chatRecords <- content(postRequest,"parsed")
json <- httr::content(postRequest, as = "text")
data <- fromJSON(json)
View(data)
postRequest = GET('https://api.twitter.com/1.1/search/tweets.json?q=%40oua', sig)
chatRecords <- content(postRequest,"parsed")
json <- httr::content(postRequest, as = "text")
data <- fromJSON(json)
json
head(record)
json
library(httr)
library(jsonlite)
body <- '{"postUserLogin":{"login":"takahiro.honda@open.edu.au","password":"GoodData1","remember":1}}'
url <- "https://secure.gooddata.com/gdc/account/login"
post_request <- POST(url, body = body, add_headers("Accept"= "application/json","Content-Type"="application/json"))
content(post_request)
head(post_request)
head(post_request)$all_headers[[1]]$headers$`set-cookie`
head(post_request)$cookies[1,'value']
cookies(post_request)
"Cookie" = c("$Version=0", sprintf("GDCAuthSST=%s", head(post_request)$cookies[1,'value']), "$Path=/gdc/account")
url2 <- "https://secure.gooddata.com/gdc/account/token"
post_request2 <- GET(url2,add_headers("Set-Cookie" = sprintf("GDCAuthSST=%s; path=/gdc/; secure; HttpOnly",head(post_request)$cookies[1,'value']),
"Content-Type" = "application/json"))
head(post_request2)
post_request2
head(post_request)$cookies[1,'value']
post_request2
head(post_request2)
library(maniluplate)
if (require(manipulat)){
print("Loading the package")
} else{
install.packages("manipulat")
print("Installing the package")
if(require(manipulat)){
print("Loading the package")
else{
print("Failed to install the package")
}
}
}
if (require(manipulat)){
print("Loading the package")
} else{
install.packages("manipulat")
print("Installing the package")
if(require(manipulat)){
print("Loading the package")
}
else{
print("Failed to install the package")
}
}
if (require(manipulate)){
print("Loading the package")
} else{
install.packages("manipulat")
print("Installing the package")
if(require(manipulate)){
print("Loading the package")
}
else{
print("Failed to install the package")
}
}
manipulate(plot(1:x), x = slider(1, 100))
plot(1:20)
?plot
data(galton)
library(HistData)
data(galton)
data(Galton)
head(Galton)
nrow(Galton)
hist(Galton$parent)
plot(Galton$parent, Galton$child)
lm(Galton$parent, Galton$child)
lm(child ~ parent, data = Galton)
summary(model)
model <- lm(child ~ parent, data = Galton)
summary(model)
library(ggplot2)
ggplot(Galton, aes(x=parent)) + geom_histogram()
ggplot(Galton, aes(x=parent)) + geom_histogram(ninwidth=50)
ggplot(Galton, aes(x=parent)) + geom_histogram(bninwidth=50)
ggplot(Galton, aes(x=parent), bninwidth=50) + geom_histogram()
ggplot(Galton, aes(x=parent)) + geom_histogram() + stat_bin(bins = 50)
ggplot(Galton, aes(x=parent, y=child)) + geom_plot() + geom_smooth()
ggplot(Galton, aes(x=parent, y=child)) + geom_point() + geom_smooth()
ggplot(Galton, aes(x=parent, y=child)) + geom_point() + geom_smooth(lm)
ggplot(Galton, aes(x=parent, y=child)) + geom_point() + geom_line()
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=4000)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=50)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=30)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=4)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=0.5)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=1)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=0.8)
ggplot(Galton, aes(x=parent)) + geom_histogram(stat="bin", binwidth=1, color = "red")
ggplot(Galton, aes(x=parent), color='pink') + geom_histogram(stat="bin", binwidth=1, color = "red")
ggplot(Galton, aes(x=parent, y=child)) + geom_point() + stat_smooth(method="lm")
ggplot(Galton, aes(x=parent, y=child)) + geom_point() + stat_smooth(method="lm", se=F)
ggplot(Galton, aes(x=parent, y=child)) + geom_point(color='pink') + stat_smooth(method="lm", se=F)
ggplot(Galton, aes(x=parent, y=child)) + geom_point(color='green') + stat_smooth(method="lm", se=F)
hist(Galton$parent, col="red")
manipulate(
hist(Galton$x, col="blue", x = picker("child", "parent") )
)
manipulate(
hist(Galton$x, col="blue"), x = picker("child", "parent") )
)
manipulate(
hist(Galton$x, col="blue"), x = picker("child", "parent") )
manipulate(
hist(Galton$x, col="blue"), x = picker("child", "parent")
)
manipulate(
hist(Galton$x, col="blue"), x = picker(child, parent)
)
hist(parent, col="red", data = "Galton")
plot(Galton[1,], Galton$child)
plot(Galton[,1], Galton$child)
manipulate(
hist(Galton[,x], col="blue"), x = picker("child" = 1, "parent" = 2)
)
shiny::runApp('C:/Users/Taka/Desktop/Developing Data Product/Week 1 Shiny rCharts GoogleVis/Example 3 Reactive/mpgReg')
runApp('C:/Users/Taka/Desktop/Developing Data Product/Week 1 Shiny rCharts GoogleVis/Example 3 Reactive/mpgReg')
runApp('C:/Users/Taka/Desktop/Developing Data Product/Week 1 Shiny rCharts GoogleVis/Example 3 Reactive/mpgReg')
runApp('C:/Users/Taka/Desktop/Developing Data Product/Week 1 Shiny rCharts GoogleVis/Example 3 Reactive/mpgReg')
shiny::runApp('C:/Users/Taka/Desktop')
x <- "To+find+out+the volume purely from website, exclude 'Application required and eligible from the 'STATUS DETAILS filter."
y <- gsub(x, ' ', '+')
y
y <- gsub(' ', '+', x)
y
.Library
shiny::runApp('C:/Users/Taka/Desktop/diamond shiny')
runApp('C:/Users/Taka/Desktop/diamond shiny')
library(shiny)
if(require(UsingR)){
print('Loading UsingR')
} else {
install.packages("UsingR")
if(require(UsingR)){
print('Loading UsingR')
} else{
'Failed to install UsingR'
}
}
if(require(ggplot2)){
print('Loading ggplot2')
} else {
install.packages("ggplot2")
if(require(ggplot2)){
print('Loading ggplot2')
} else{
'Failed to install ggplot2'
}
}
if(require(plotly)){
print('Loading plotly')
} else {
install.packages('plotly')
if(require(plotly)){
print('Loading plotly')
} else {
'Failed to install plotly'
}
}
runApp('C:/Users/Taka/Desktop/diamond shiny')
.libPaths
.libPaths()
runApp('R/win-library/3.2/plotly/examples/plotlyShinyModules')
runApp('C:/Users/Taka/Desktop/diamond shiny')
runApp('C:/Users/Taka/Desktop/diamond shiny')
runApp('C:/Users/Taka/Desktop/diamond shiny')
runApp('C:/Users/Taka/Desktop/diamond shiny')
setwd("C:/Users/Taka/Desktop/diamond shiny 2")
runApp()
runApp()
runApp()
